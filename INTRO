<h2>Intro</h2>
The idea behind this project is to supply proper GPS for Windows Phone. It also serves as real-world test case for Cibyl to convert C code to .NET framework code.

<h2>The code is composed of 3 layers:</h2>
bb_waze_code - the C code of Waze client. Here you can find the general code of Waze client for all platforms.
WazeWP7 - the Silverlight frontend of Waze for Windows Phone 7. Contains both the loading module and the Syscalls implementation for all I/O functions called from the C code.
cibyl - the modified cibyl code that was converted to yield CIL code instead of Java code. You will hardly need to touch this code if ever.

<h2>OK, so what's next? how do I start?</h2>
You open the .sln file from WazeWP7 and run it. As simple as that.

<h2>Cool, now I want to change the behavior. How do I do that?</h2>
As noted above, the code is splitted among bb_waze_code directory and WazeWP7 directory. For changing Waze logic you will probably need to find the C source code inside bb_waze_code and change the code there. For changing the I/O implementation (reading from files, opening web requests, reading GPS status, playing sound etc.) you will probably need to check the Syscalls.cs file inside WazeWP7 directory.

After changing C source file you need to compile the cibyl.dll. In order to do that you open cygwin and cd to <sources_dir>/bb_waze_code/j2me.
There you execute "./run.sh".
You should see GCC working very hard and at the end you should see "make: *** No rule to make target `res/1_route.png', needed by `all'.  Stop." - this is the sign everything is OK. Behind the scenes a lot of j files have been generated inside <sources_dir>/converted + CibylCallTable.cs inside <sources_dir>/WazeWp7 directory have been generated + program.data.bin have been generated inside <sources_dir>/WazeWP7/Resources.
Now we need to build cibyl.dll out of the newly created j files. In order to do that open "Visual Studio Command Prompt (2010)". CD to <sources_dir>/converted and execute "compile.cmd". This will build cibyl.dll.
Now you can simply execute Waze from within the WazeWP7 visual studio solution.

<h2>How to I debug the changed C files</h2>
1. Open roadmap_log.c file and search for the following lines:
"
   if(level < ROADMAP_MESSAGE_FATAL)  {
	   
	return; // don't show WARNING, INFO, and DEBUG prints in J2ME, too slow.
   
   }
"
   Comment out all of them.

2. Add roadmap_log call near the area where you want to debug in printf like format (e.g. roadmap_log(ROADMAP_ERROR, "<your message %d>", <you int value>)).

3. Run Waze from Visual Studio in debug mode. All roadmap_logs calls will be printed out to output pane.

        private static Random random;

	/* These functions have dependencies and are therefore placed here */
public static final int __strlen(int src)
{
  int s = src;

  while(CRunTime.memoryReadByte(s) != 0)
    s++;

  return s - src;
}

public static final int __strncpy(int dest, int src, int n)
{
  while (((dest & 0x3) != 0) && (n > 0)) {
    int b = CRunTime.memoryReadByte(src++);
    CRunTime.memoryWriteByte(dest, b);
    dest++;
    n--;
    if ((b == 0) || (n == 0)) return dest;
  }

  while (n > 3) {
    int i = 0;
    /* We can probably optimize this by reading a word size if possible */
    for (int j=0; j<4; j++) {
      i = i << 8;
      int b = CRunTime.memoryReadByte(src++) & 0xff;
      n--;
      i |= b;
      if (b == 0) {
        i = i << 8*(3-j);
        CRunTime.memoryWriteWord(dest, i);
        return dest;
      }
    }

    CRunTime.memoryWriteWord(dest, i);
    dest += 4;
  }

  while (n > 0) {
    int b = CRunTime.memoryReadByte(src++);
    CRunTime.memoryWriteByte(dest, b);
    dest++;
    n--;
    if (b == 0) break;
  }

  return dest;
}

public static final int __strncmp(int s1, int s2, int n)
{
  int s = s1;
  int d = s2;
  int a = 0;
  int b = 0;

  do
    {
      if (s - s1 >= n)
	break;

      a = CRunTime.memoryReadByte(s);
      b = CRunTime.memoryReadByte(d);

      s++;
      d++;
    } while ( a == b && b != 0 && a != 0 );

  if (a < b)
    return -1;
  else if (a > b)
    return 1;
  return 0;
}

public static final int __strncat(int dest, int src, int n)
{
  __strncpy(dest + __strlen(dest), src, n);

  return dest;
}
